"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCommand = void 0;
const node_util_1 = require("node:util");
const node_child_process_1 = require("node:child_process");
const artus_cli_1 = require("@artus-cli/artus-cli");
const debug = (0, node_util_1.debuglog)('egg-bin:base');
// only hook once and only when ever start any child.
const childs = new Set();
let hadHook = false;
function gracefull(proc) {
    // save child ref
    childs.add(proc);
    // only hook once
    /* c8 ignore else */
    if (!hadHook) {
        hadHook = true;
        let signal;
        ['SIGINT', 'SIGQUIT', 'SIGTERM'].forEach(event => {
            process.once(event, () => {
                signal = event;
                process.exit(0);
            });
        });
        process.once('exit', (code) => {
            for (const child of childs) {
                debug('process exit code: %o, kill child %o with %o', code, child.pid, signal);
                child.kill(signal);
            }
        });
    }
}
class ForkError extends Error {
    code;
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}
let BaseCommand = class BaseCommand extends artus_cli_1.Command {
    dryRun;
    require;
    ctx;
    utils;
    // FIXME: should has a better way to init global args default value
    get base() {
        return this.ctx.args.base;
    }
    async run() {
        await this.utils.redirect(['--help']);
    }
    async formatRequires() {
        const requires = this.require ?? [];
        const eggRequire = this.ctx.args.pkgEgg.require;
        if (Array.isArray(eggRequire)) {
            for (const r of eggRequire) {
                requires.push(r);
            }
        }
        else if (typeof eggRequire === 'string' && eggRequire) {
            requires.push(eggRequire);
        }
        return requires;
    }
    async forkNode(modulePath, args, options = {}) {
        if (this.dryRun) {
            console.log('dry run: $ %o', `${process.execPath} ${modulePath} ${args.join(' ')}`);
            return;
        }
        options = {
            stdio: 'inherit',
            env: this.ctx.env,
            cwd: this.base,
            ...options,
        };
        const proc = (0, node_child_process_1.fork)(modulePath, args, options);
        debug('Run fork pid: %o, `%s %s %s`', proc.pid, process.execPath, modulePath, args.join(' '));
        gracefull(proc);
        return new Promise((resolve, reject) => {
            proc.once('exit', code => {
                debug('fork pid: %o exit code %o', proc.pid, code);
                childs.delete(proc);
                if (code !== 0) {
                    const err = new ForkError(modulePath + ' ' + args.join(' ') + ' exit with code ' + code, code);
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
};
__decorate([
    (0, artus_cli_1.Option)({
        description: 'whether show full command script only, default is false',
        alias: 'd',
        type: 'boolean',
        default: false,
    }),
    __metadata("design:type", Boolean)
], BaseCommand.prototype, "dryRun", void 0);
__decorate([
    (0, artus_cli_1.Option)({
        description: 'require the given module',
        alias: 'r',
        array: true,
        default: [],
    }),
    __metadata("design:type", Array)
], BaseCommand.prototype, "require", void 0);
__decorate([
    (0, artus_cli_1.Inject)(),
    __metadata("design:type", artus_cli_1.CommandContext)
], BaseCommand.prototype, "ctx", void 0);
__decorate([
    (0, artus_cli_1.Inject)(),
    __metadata("design:type", artus_cli_1.Utils)
], BaseCommand.prototype, "utils", void 0);
BaseCommand = __decorate([
    (0, artus_cli_1.DefineCommand)()
], BaseCommand);
exports.BaseCommand = BaseCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbWQvYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx5Q0FBcUM7QUFDckMsMkRBQXFFO0FBQ3JFLG9EQU04QjtBQUU5QixNQUFNLEtBQUssR0FBRyxJQUFBLG9CQUFRLEVBQUMsY0FBYyxDQUFDLENBQUM7QUFFdkMscURBQXFEO0FBQ3JELE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFDO0FBQ3ZDLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNwQixTQUFTLFNBQVMsQ0FBQyxJQUFrQjtJQUNuQyxpQkFBaUI7SUFDakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVqQixpQkFBaUI7SUFDakIsb0JBQW9CO0lBQ3BCLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2YsSUFBSSxNQUFzQixDQUFDO1FBQzNCLENBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDakQsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUN2QixNQUFNLEdBQUcsS0FBdUIsQ0FBQztnQkFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUNwQyxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtnQkFDMUIsS0FBSyxDQUFDLDhDQUE4QyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUMvRSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FB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