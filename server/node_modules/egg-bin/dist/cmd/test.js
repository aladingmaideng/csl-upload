"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestCommand = void 0;
const node_util_1 = require("node:util");
const node_os_1 = __importDefault(require("node:os"));
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const artus_cli_1 = require("@artus-cli/artus-cli");
const globby_1 = __importDefault(require("globby"));
const jest_changed_files_1 = require("jest-changed-files");
const base_1 = require("./base");
const debug = (0, node_util_1.debuglog)('egg-bin:test');
let TestCommand = class TestCommand extends base_1.BaseCommand {
    files;
    timeout;
    grep;
    changed;
    parallel;
    jobs;
    autoAgent;
    mochawesome;
    bail;
    async run() {
        try {
            await promises_1.default.access(this.base);
        }
        catch (err) {
            console.error('baseDir: %o not exists', this.base);
            throw err;
        }
        const mochaFile = process.env.MOCHA_FILE || require.resolve('mocha/bin/_mocha');
        if (this.parallel) {
            this.ctx.env.ENABLE_MOCHA_PARALLEL = 'true';
            if (this.autoAgent) {
                this.ctx.env.AUTO_AGENT = 'true';
            }
        }
        // set NODE_ENV=test, let egg application load unittest logic
        // https://eggjs.org/basics/env#difference-from-node_env
        this.ctx.env.NODE_ENV = 'test';
        debug('run test: %s %o', mochaFile, this.ctx.args);
        const mochaArgs = await this.formatMochaArgs();
        if (!mochaArgs)
            return;
        await this.forkNode(mochaFile, mochaArgs);
    }
    async formatMochaArgs() {
        // collect require
        const requires = await this.formatRequires();
        try {
            const eggMockRegister = require.resolve('egg-mock/register', { paths: [this.base] });
            requires.push(eggMockRegister);
            debug('auto register egg-mock: %o', eggMockRegister);
        }
        catch (err) {
            // ignore egg-mock not exists
            debug('auto register egg-mock fail, can not require egg-mock on %o, error: %s', this.base, err.message);
        }
        // handle mochawesome enable
        let reporter = this.ctx.env.TEST_REPORTER;
        let reporterOptions = '';
        if (!reporter && this.mochawesome) {
            // use https://github.com/node-modules/mochawesome/pull/1 instead
            reporter = require.resolve('mochawesome-with-mocha');
            reporterOptions = 'reportDir=node_modules/.mochawesome-reports';
            if (this.parallel) {
                // https://github.com/adamgruber/mochawesome#parallel-mode
                requires.push(require.resolve('mochawesome-with-mocha/register'));
            }
        }
        const ext = this.ctx.args.typescript ? 'ts' : 'js';
        let pattern = this.files;
        // changed
        if (this.changed) {
            pattern = await this.getChangedTestFiles(this.base, ext);
            if (!pattern.length) {
                console.log('No changed test files');
                return;
            }
            debug('changed files: %o', pattern);
        }
        if (!pattern.length && process.env.TESTS) {
            pattern = process.env.TESTS.split(',');
        }
        // collect test files
        if (!pattern.length) {
            pattern = [`test/**/*.test.${ext}`];
        }
        pattern = pattern.concat(['!test/fixtures', '!test/node_modules']);
        // expand glob and skip node_modules and fixtures
        const files = globby_1.default.sync(pattern, { cwd: this.base });
        files.sort();
        if (files.length === 0) {
            console.log(`No test files found with ${pattern}`);
            return;
        }
        // auto add setup file as the first test file
        const setupFile = node_path_1.default.join(this.base, `test/.setup.${ext}`);
        try {
            await promises_1.default.access(setupFile);
            files.unshift(setupFile);
        }
        catch {
            // ignore
        }
        return [
            this.dryRun ? '--dry-run' : '',
            // force exit
            '--exit',
            this.bail ? '--bail' : '',
            this.grep.map(pattern => `--grep='${pattern}'`).join(' '),
            this.timeout === false ? '--no-timeout' : `--timeout=${this.timeout}`,
            this.parallel ? '--parallel' : '',
            this.parallel && this.jobs ? `--jobs=${this.jobs}` : '',
            reporter ? `--reporter=${reporter}` : '',
            reporterOptions ? `--reporter-options=${reporterOptions}` : '',
            ...requires.map(r => `--require=${r}`),
            ...files,
        ].filter(a => a.trim());
    }
    async getChangedTestFiles(dir, ext) {
        const res = await (0, jest_changed_files_1.getChangedFilesForRoots)([node_path_1.default.join(dir, 'test')], {});
        const changedFiles = res.changedFiles;
        const files = [];
        for (const file of changedFiles) {
            // only find test/**/*.test.(js|ts)
            if (file.endsWith(`.test.${ext}`)) {
                files.push(file);
            }
        }
        return files;
    }
};
__decorate([
    (0, artus_cli_1.Option)({
        default: [],
        array: true,
        type: 'string',
    }),
    __metadata("design:type", Array)
], TestCommand.prototype, "files", void 0);
__decorate([
    (0, artus_cli_1.Option)({
        description: 'set test-case timeout in milliseconds, default is 60000',
        alias: 't',
        default: process.env.TEST_TIMEOUT ?? 60000,
    }),
    __metadata("design:type", Object)
], TestCommand.prototype, "timeout", void 0);
__decorate([
    (0, artus_cli_1.Option)({
        description: 'only run tests matching <pattern>',
        alias: 'g',
        type: 'string',
        array: true,
        default: [],
    }),
    __metadata("design:type", Array)
], TestCommand.prototype, "grep", void 0);
__decorate([
    (0, artus_cli_1.Option)({
        description: 'only test with changed files and match test/**/*.test.(js|ts), default is false',
        alias: 'c',
        type: 'boolean',
        default: false,
    }),
    __metadata("design:type", Boolean)
], TestCommand.prototype, "changed", void 0);
__decorate([
    (0, artus_cli_1.Option)({
        description: 'mocha parallel mode, default is false',
        alias: 'p',
        type: 'boolean',
        default: false,
    }),
    __metadata("design:type", Boolean)
], TestCommand.prototype, "parallel", void 0);
__decorate([
    (0, artus_cli_1.Option)({
        description: 'number of jobs to run in parallel',
        type: 'number',
        default: node_os_1.default.cpus().length - 1,
    }),
    __metadata("design:type", Number)
], TestCommand.prototype, "jobs", void 0);
__decorate([
    (0, artus_cli_1.Option)({
        description: 'auto bootstrap agent in mocha master process, default is true',
        type: 'boolean',
        default: true,
    }),
    __metadata("design:type", Boolean)
], TestCommand.prototype, "autoAgent", void 0);
__decorate([
    (0, artus_cli_1.Option)({
        description: 'enable mochawesome reporter, default is true',
        type: 'boolean',
        default: true,
    }),
    __metadata("design:type", Boolean)
], TestCommand.prototype, "mochawesome", void 0);
__decorate([
    (0, artus_cli_1.Option)({
        description: 'bbort ("bail") after first test failure',
        alias: 'b',
        type: 'boolean',
        default: false,
    }),
    __metadata("design:type", Boolean)
], TestCommand.prototype, "bail", void 0);
TestCommand = __decorate([
    (0, artus_cli_1.DefineCommand)({
        command: 'test [files...]',
        description: 'Run the test',
        alias: ['t'],
    })
], TestCommand);
exports.TestCommand = TestCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbWQvdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5Q0FBcUM7QUFDckMsc0RBQXlCO0FBQ3pCLGdFQUFrQztBQUNsQywwREFBNkI7QUFDN0Isb0RBRThCO0FBQzlCLG9EQUE0QjtBQUM1QiwyREFBNkQ7QUFDN0QsaUNBQXFDO0FBRXJDLE1BQU0sS0FBSyxHQUFHLElBQUEsb0JBQVEsRUFBQyxjQUFjLENBQUMsQ0FBQztBQU9oQyxJQUFNLFdBQVcsR0FBakIsTUFBTSxXQUFZLFNBQVEsa0JBQVc7SUFNMUMsS0FBSyxDQUFXO0lBT2hCLE9BQU8sQ0FBbUI7SUFTMUIsSUFBSSxDQUFXO0lBUWYsT0FBTyxDQUFVO0lBUWpCLFFBQVEsQ0FBVTtJQU9sQixJQUFJLENBQVM7SUFPYixTQUFTLENBQVU7SUFPbkIsV0FBVyxDQUFVO0lBUXJCLElBQUksQ0FBVTtJQUVkLEtBQUssQ0FBQyxHQUFHO1FBQ1AsSUFBSTtZQUNGLE1BQU0sa0JBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuRCxNQUFNLEdBQUcsQ0FBQztTQUNYO1FBRUQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hGLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxNQUFNLENBQUM7WUFDNUMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcs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