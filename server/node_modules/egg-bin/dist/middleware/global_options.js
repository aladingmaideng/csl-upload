"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_util_1 = require("node:util");
const node_path_1 = __importDefault(require("node:path"));
const artus_cli_1 = require("@artus-cli/artus-cli");
const utils_1 = require("../utils");
const debug = (0, node_util_1.debuglog)('egg-bin:midddleware:global_options');
let default_1 = class default_1 {
    program;
    async configDidLoad() {
        // add global options
        this.program.option({
            base: {
                description: 'directory of application, default to `process.cwd()`',
                type: 'string',
                alias: 'baseDir',
            },
            typescript: {
                description: 'whether enable typescript support',
                type: 'boolean',
                alias: 'ts',
            },
            tscompiler: {
                description: 'ts compiler, like ts-node/register, ts-node/register/transpile-only, @swc-node/register, esbuild-register etc',
                type: 'string',
                alias: 'tsc',
            },
        });
        this.program.use(async (ctx, next) => {
            debug('before next');
            if (!ctx.args.base) {
                ctx.args.base = ctx.cwd;
                debug('ctx.args.base not set, auto set it to cwd: %o', ctx.cwd);
            }
            if (!node_path_1.default.isAbsolute(ctx.args.base)) {
                ctx.args.base = node_path_1.default.join(ctx.cwd, ctx.args.base);
            }
            debug('matched cmd: %o, ctx.args.base: %o', ctx.matched?.cmd, ctx.args.base);
            const pkg = await (0, utils_1.readPackageJSON)(ctx.args.base);
            ctx.args.pkgEgg = pkg.egg ?? {};
            const tscompiler = ctx.args.tscompiler ?? ctx.env.TS_COMPILER ?? ctx.args.pkgEgg.tscompiler;
            if (ctx.args.typescript === undefined) {
                // try to ready EGG_TYPESCRIPT env first, only accept 'true' or 'false' string
                if (ctx.env.EGG_TYPESCRIPT === 'false') {
                    ctx.args.typescript = false;
                    debug('detect typescript=%o from EGG_TYPESCRIPT=%o', false, ctx.env.EGG_TYPESCRIPT);
                }
                else if (ctx.env.EGG_TYPESCRIPT === 'true') {
                    ctx.args.typescript = true;
                    debug('detect typescript=%o from EGG_TYPESCRIPT=%o', true, ctx.env.EGG_TYPESCRIPT);
                }
                else if (typeof ctx.args.pkgEgg.typescript === 'boolean') {
                    // read `egg.typescript` from package.json if not pass argv
                    ctx.args.typescript = ctx.args.pkgEgg.typescript;
                    debug('detect typescript=%o from pkg.egg.typescript=%o', true, ctx.args.pkgEgg.typescript);
                }
                else if (pkg.dependencies?.typescript) {
                    // auto detect pkg.dependencies.typescript or pkg.devDependencies.typescript
                    ctx.args.typescript = true;
                    debug('detect typescript=%o from pkg.dependencies.typescript=%o', true, pkg.dependencies.typescript);
                }
                else if (pkg.devDependencies?.typescript) {
                    ctx.args.typescript = true;
                    debug('detect typescript=%o from pkg.devDependencies.typescript=%o', true, pkg.devDependencies.typescript);
                }
                else if (await (0, utils_1.hasTsConfig)(ctx.args.base)) {
                    // tsconfig.json exists
                    ctx.args.typescript = true;
                    debug('detect typescript=%o cause tsconfig.json exists', true);
                }
                else if (tscompiler) {
                    ctx.args.typescript = true;
                    debug('detect typescript=%o from --tscompiler=%o', true, tscompiler);
                }
            }
            if (ctx.args.typescript) {
                const findPaths = [node_path_1.default.dirname(__dirname)];
                if (tscompiler) {
                    // try app baseDir first on custom tscompiler
                    findPaths.unshift(ctx.args.base);
                }
                ctx.args.tscompiler = tscompiler ?? 'ts-node/register';
                const tsNodeRegister = require.resolve(ctx.args.tscompiler, {
                    paths: findPaths,
                });
                // should require tsNodeRegister on current process, let it can require *.ts files
                // e.g.: dev command will execute egg loader to find configs and plugins
                require(tsNodeRegister);
                // let child process auto require ts-node too
                (0, utils_1.addNodeOptionsToEnv)(`--require ${tsNodeRegister}`, ctx.env);
                // tell egg loader to load ts file
                // see https://github.com/eggjs/egg-core/blob/master/lib/loader/egg_loader.js#L443
                ctx.env.EGG_TYPESCRIPT = 'true';
                // set current process.env.EGG_TYPESCRIPT too
                process.env.EGG_TYPESCRIPT = 'true';
                // load files from tsconfig on startup
                ctx.env.TS_NODE_FILES = process.env.TS_NODE_FILES ?? 'true';
                // keep same logic with egg-core, test cmd load files need it
                // see https://github.com/eggjs/egg-core/blob/master/lib/loader/egg_loader.js#L49
                (0, utils_1.addNodeOptionsToEnv)(`--require ${require.resolve('tsconfig-paths/register')}`, ctx.env);
                debug('set NODE_OPTIONS: %o', ctx.env.NODE_OPTIONS);
            }
            debug('ctx.args: %o', ctx.args);
            debug('enter next');
            await next();
            debug('after next');
        });
    }
};
__decorate([
    (0, artus_cli_1.Inject)(),
    __metadata("design:type", artus_cli_1.Program)
], default_1.prototype, "program", void 0);
__decorate([
    (0, artus_cli_1.LifecycleHook)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], default_1.prototype, "configDidLoad", null);
default_1 = __decorate([
    (0, artus_cli_1.LifecycleHookUnit)()
], default_1);
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsX29wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9nbG9iYWxfb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLHlDQUFxQztBQUNyQywwREFBNkI7QUFDN0Isb0RBRzhCO0FBQzlCLG9DQUE2RTtBQUU3RSxNQUFNLEtBQUssR0FBRyxJQUFBLG9CQUFRLEVBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUc5QyxnQkFBQTtJQUVJLE9BQU8sQ0FBVTtJQUc1QixBQUFOLEtBQUssQ0FBQyxhQUFhO1FBQ2pCLHFCQUFxQjtRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNsQixJQUFJLEVBQUU7Z0JBQ0osV0FBVyxFQUFFLHNEQUFzRDtnQkFDbkUsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsS0FBSyxFQUFFLFNBQVM7YUFDakI7WUFDRCxVQUFVLEVBQUU7Z0JBQ1YsV0FBVyxFQUFFLG1DQUFtQztnQkFDaEQsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsS0FBSyxFQUFFLElBQUk7YUFDWjtZQUNELFVBQVUsRUFBRTtnQkFDVixXQUFXLEVBQUUsK0dBQStHO2dCQUM1SCxJQUFJLEVBQUUsUUFBUTtnQkFDZCxLQUFLLEVBQUUsS0FBSzthQUNiO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQW1CLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDbkQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztnQkFDeEIsS0FBSyxDQUFDLCtDQUErQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNqRTtZQUNELElB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